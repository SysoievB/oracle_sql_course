-- Primary Key (PK) and Unique Constraints:
-- Both automatically create indexes under the hood in most relational database
-- systems (like Oracle, PostgreSQL, MySQL, SQL Server, etc.).
-- This index helps to quickly find users by their email.
-- It avoids full table scans by using a B-tree structure.
CREATE INDEX idx_users_email ON users(email);

-- Composite index: useful when filtering or sorting by BOTH first_name and last_name.
-- Only effective when the WHERE clause uses the **leading column(s)**.
CREATE INDEX idx_users_name ON users(first_name, last_name);
-- Query	                                Composite Index Needed?
-- WHERE col1 = ?	                        ‚úÖ Use idx_col1 or idx_col1_col2
-- WHERE col2 = ?	                        ‚ùå idx_col1_col2 not helpful (use idx_col2)
-- WHERE col1 = ? AND col2 = ?	            ‚úÖ idx_col1_col2 best
-- WHERE col2 = ? AND col1 = ?	            ‚úÖ still works (order in WHERE doesn't matter, order in INDEX matters)
-- WHERE col1 = ? AND col2 = ? AND col3 = ?	‚úÖ You can create a 3-column index if query always filters that way

-- üí° Why idx_col1_col2 doesn‚Äôt help WHERE col2 = ??
-- Let's say you have this composite (multi-column) index:
--
-- CREATE INDEX idx_col1_col2 ON my_table(col1, col2);
-- This index is ordered first by col1, then by col2 within each value of col1, like this:
--
-- (col1, col2)
-- --------------
--   A     10
--   A     11
--   A     12
--   B     8
--   B     9
--   C     4
-- So this index is very helpful if your query uses:
--
-- WHERE col1 = ?
--
-- WHERE col1 = ? AND col2 = ?
--
-- WHERE col1 = ? AND col2 BETWEEN ...
--
-- But if your query is only:
--
-- WHERE col2 = ?
-- Then this index is useless because:
--
-- The database cannot jump directly to the correct col2 values.
--
-- It needs to start scanning from the beginning of the index, but the index is organized by col1 first, so it can't efficiently find col2 values.
--
-- üîç Think of it like a phone book:
-- It‚Äôs sorted by last name, then first name.
--
-- If you know the last name = "Smith" ‚Üí super fast.
--
-- If you only know first name = "John" ‚Üí the book is not sorted by first name, so you'd need to scan the whole thing.
--
-- ‚úÖ Solution?
-- If you want to speed up WHERE col2 = ?, you need:
--
-- CREATE INDEX idx_col2 ON my_table(col2);
-- Or, if sometimes you filter both col1 and col2, and sometimes just col2:
--
-- You may consider having both idx_col1_col2 and idx_col2.


-- –°–æ–∑–¥–∞—Ç—å —Ç–∞–±–ª–∏—Ü—É address —Å–æ —Å–ª–µ–¥—É—é—â–∏–º–∏ —Å—Ç–æ–ª–±—Ü–∞–º–∏: id, country, city.
-- –ü—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ç–∞–±–ª–∏—Ü—ã —Å–æ–∑–¥–∞–π—Ç–µ –Ω–∞ inline —É—Ä–æ–≤–Ω–µ unique constraint —Å
-- –∏–º–µ–Ω–µ–º ad_id_un –Ω–∞ —Å—Ç–æ–ª–±–µ—Ü id.
CREATE TABLE address
(
    id      INT,
    country VARCHAR2(255),
    city    VARCHAR2(255),
    CONSTRAINT ad_id_un UNIQUE (id)
);

-- –°–æ–∑–¥–∞—Ç—å —Ç–∞–±–ª–∏—Ü—É friends —Å–æ —Å–ª–µ–¥—É—é—â–∏–º–∏ —Å—Ç–æ–ª–±—Ü–∞–º–∏: id, name, email,
-- address_id, birthday. –ü—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ç–∞–±–ª–∏—Ü—ã —Å–æ–∑–¥–∞–π—Ç–µ –Ω–∞ inline —É—Ä–æ–≤–Ω–µ
-- foreign key constraint –Ω–∞ —Å—Ç–æ–ª–±–µ—Ü address_id, –∫–æ—Ç–æ—Ä—ã–π —Å—Å—ã–ª–∞–µ—Ç—Å—è –Ω–∞
-- —Å—Ç–æ–ª–±–µ—Ü id –∏–∑ —Ç–∞–±–ª–∏—Ü—ã address, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –æ–ø—Ü–∏—é ¬´on delete set null¬ª.
-- –¢–∞–∫–∂–µ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ç–∞–±–ª–∏—Ü—ã —Å–æ–∑–¥–∞–π—Ç–µ –Ω–∞ table —É—Ä–æ–≤–Ω–µ check constraint
-- –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç–æ–≥–æ, —á—Ç–æ –¥–ª–∏–Ω–∞ –∏–º–µ–Ω–∏ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –±–æ–ª—å—à–µ 3-—Ö.
-- –°–æ–∑–¥–∞—ë–º —Ç–∞–±–ª–∏—Ü—É friends —Å –≤–Ω–µ—à–Ω–∏–º –∫–ª—é—á–æ–º –∏ –ø—Ä–æ–≤–µ—Ä–∫–æ–π –¥–ª–∏–Ω—ã –∏–º–µ–Ω–∏
CREATE TABLE friends
(
    id         INT,
    name       VARCHAR2(255) CHECK (LENGTH(name) > 3),
    email      VARCHAR2(255),
    address_id INT,
    birthday   VARCHAR2(255),
    CONSTRAINT fk_address FOREIGN KEY (address_id) REFERENCES address (id)
        ON DELETE SET NULL
);

-- –°–æ–∑–¥–∞–π—Ç–µ —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∏–Ω–¥–µ–∫—Å –Ω–∞ —Å—Ç–æ–ª–±–µ—Ü id –∏–∑ —Ç–∞–±–ª–∏—Ü—ã friends.
create unique index un_index_id on friends(id);

-- –° –ø–æ–º–æ—â—å—é —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–∞ ¬´add¬ª –∫–æ–º–∞–Ω–¥—ã ¬´alter table¬ª —Å–æ–∑–¥–∞–π—Ç–µ
-- constraint primary key —Å –Ω–∞–∑–≤–∞–Ω–∏–µ–º fr_id_pk –Ω–∞ —Å—Ç–æ–ª–±–µ—Ü id –∏–∑ —Ç–∞–±–ª–∏—Ü—ã friends.
ALTER TABLE friends ADD CONSTRAINT fr_id_pk PRIMARY KEY (id);


-- –°–æ–∑–¥–∞–π—Ç–µ –∏–Ω–¥–µ–∫—Å —Å –Ω–∞–∑–≤–∞–Ω–∏–µ–º fr_email_in –Ω–∞ —Å—Ç–æ–ª–±–µ—Ü email –∏–∑ —Ç–∞–±–ª–∏—Ü—ã
-- friends.
create index fr_email_in on friends(email);

-- –° –ø–æ–º–æ—â—å—é —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–∞ ¬´modify¬ª –∫–æ–º–∞–Ω–¥—ã ¬´alter table¬ª —Å–æ–∑–¥–∞–π—Ç–µ
-- constraint not null —Å –Ω–∞–∑–≤–∞–Ω–∏–µ–º fr_email_nn –Ω–∞ —Å—Ç–æ–ª–±–µ—Ü email –∏–∑ —Ç–∞–±–ª–∏—Ü—ã friends.
ALTER TABLE friends MODIFY email VARCHAR(255) CONSTRAINT fr_email_nn NOT NULL;


-- –£–¥–∞–ª–∏—Ç–µ —Ç–∞–±–ª–∏—Ü—É friends.
drop table friends;

-- –£–¥–∞–ª–∏—Ç–µ —Ç–∞–±–ª–∏—Ü—É address.
drop table address;
